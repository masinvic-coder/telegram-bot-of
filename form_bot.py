import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

BOT_TOKEN = "8277969955:AAEzitYId_cH5rKXXTdotpfw1LOX2Us6nCk"
CHANNEL_ID = -1002722852436

logging.basicConfig(level=logging.INFO)

QUESTIONS = [
    {"key": "name", "text": "1. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?"},
    {"key": "age", "text": "2. –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?"},
    {"key": "location", "text": "3. –ì–¥–µ —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è?"},
    {"key": "instagram", "text": "4. –°—Å—ã–ª–æ—á–∫–∞ –Ω–∞ Instagram"},
    {
        "key": "has_of",
        "text": "5. –£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç OnlyFans?",
        "options": ["–î–∞", "–ù–µ—Ç", "–ü–æ–∫–∞ –Ω–µ—Ç, –Ω–æ –≥–æ—Ç–æ–≤–∞ –Ω–∞—á–∞—Ç—å"],
    },
    {
        "key": "show_face",
        "text": "6. –ì–æ—Ç–æ–≤–∞ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏—Ü–æ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ?",
        "options": ["–î–∞", "–ù–µ—Ç", "–ó–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞"],
    },
    {
        "key": "contact_method",
        "text": "7. –£–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏",
        "options": ["Email", "Telegram", "Instagram", "WhatsApp"],
    },
    {"key": "contact_info", "text": "8. –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"},
    {"key": "extra", "text": "9. –ß—Ç–æ –µ—â–µ —Ö–æ—á–µ—à—å —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–µ–±–µ (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"},
]

user_states = {}

def get_next_question(state):
    step = state["step"]
    if step < len(QUESTIONS):
        q = QUESTIONS[step]
        if "options" in q:
            return q["text"], q["options"]
        else:
            return q["text"], None
    return None, None


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_chat.id
    user_states[user_id] = {"step": 0, "answers": {}}
    text, options = get_next_question(user_states[user_id])
    if options:
        markup = ReplyKeyboardMarkup([[o] for o in options], one_time_keyboard=True, resize_keyboard=True)
        await update.message.reply_text(text, reply_markup=markup)
    else:
        await update.message.reply_text(text)


async def handle_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_chat.id
    message = update.message.text.strip()

    if user_id not in user_states:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
        return

    state = user_states[user_id]
    step = state["step"]

    if step >= len(QUESTIONS):
        await update.message.reply_text("–í—ã —É–∂–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –∞–Ω–∫–µ—Ç—É. –°–ø–∞—Å–∏–±–æ!")
        return

    key = QUESTIONS[step]["key"]
    state["answers"][key] = message
    state["step"] += 1

    # Ask next question or finish
    if state["step"] < len(QUESTIONS):
        text, options = get_next_question(state)
        if options:
            markup = ReplyKeyboardMarkup([[o] for o in options], one_time_keyboard=True, resize_keyboard=True)
            await update.message.reply_text(text, reply_markup=markup)
        else:
            await update.message.reply_text(text, reply_markup=ReplyKeyboardRemove())
    else:
        await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ! –ê–Ω–∫–µ—Ç—É –ø–æ–ª—É—á–∏–ª–∏, —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π")
        await send_summary_to_channel(context, state["answers"])
        del user_states[user_id]


async def send_summary_to_channel(context, answers):
    msg = "üì• *–ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞:*\n\n"
    label_map = {
        "name": "–ò–º—è",
        "age": "–í–æ–∑—Ä–∞—Å—Ç",
        "location": "–õ–æ–∫–∞—Ü–∏—è",
        "instagram": "Instagram",
        "has_of": "–ê–∫–∫–∞—É–Ω—Ç OnlyFans",
        "show_face": "–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏—Ü–æ",
        "contact_method": "–°–≤—è–∑—å",
        "contact_info": "–ö–æ–Ω—Ç–∞–∫—Ç",
        "extra": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ",
    }
    for key in QUESTIONS:
        k = key["key"]
        v = answers.get(k, "‚Äî")
        label = label_map.get(k, k.capitalize())
        msg += f"*{label}:* {v}\n"

    await context.bot.send_message(chat_id=CHANNEL_ID, text=msg, parse_mode="Markdown")


if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_response))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()